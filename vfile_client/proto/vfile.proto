syntax = "proto3";

package vfile;

option go_package = "./proto/vfile";

enum FileServiceVersion{
    V_0_1_0 = 0;
}

message ServiceInfoRequest{

}

message ServiceInfoResponse{
    FileServiceVersion version = 1;
     string os = 2;
     string hostname = 3;
     string accept_protocol = 4;
}

message MetaData {
     string file_name = 1;
     string uri = 2;
     string type = 3;
     string hash = 4;
     int64 file_size= 5;
}

message File {
    bytes content = 1;
}

message RequestOption{
     int64 slice_size = 1;
     int64 timeout = 2;
     int64 range_start = 3;
     int64 range_end = 4;
}

message DownloadOption{
     int64 slice_size = 1;
     int64 timeout = 2;
     int64 range_start = 3;
     int64 range_end = 4;
}

message UploadRequest{
    MetaData metadata = 1;
    File file = 2;
}

message UploadStreamRequest{
    oneof request {
        MetaData metadata = 1;
        File file = 2;
    }
}

message UploadWithOptionRequest{
    oneof request {
        MetaData metadata = 1;
        RequestOption option = 2;
        File file = 3;
    }
}

message UploadResponse{
    int32 code = 1;
    string message = 2;
    string uri = 3;
}

message DownloadRequest{
    string uri = 1;
     DownloadOption option = 3;
}

message DownloadResponse{
    int32 code = 1;
    string message = 2;
    MetaData metadata = 3;
    File file = 4;
}

message DownloadStreamResponse{
    int32 code = 1;
    string message = 2;
    oneof response {
        MetaData metadata = 3;
        File file = 4;
    }
}

service FileService{
    rpc ServiceInfo(ServiceInfoRequest)returns(ServiceInfoResponse);
    rpc Upload(UploadRequest) returns(UploadResponse);
    rpc UploadStream(stream UploadStreamRequest) returns(UploadResponse);
    rpc UploadWithOption(stream UploadWithOptionRequest) returns(UploadResponse);
    rpc Download(DownloadRequest) returns(DownloadResponse);
    rpc DownloadStream(DownloadRequest) returns(stream DownloadStreamResponse);
    rpc DownloadWithOption(DownloadRequest) returns(stream DownloadStreamResponse);
}
