// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/newvcms.proto

package newvcms

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InstanceServiceClient is the client API for InstanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InstanceServiceClient interface {
	CreateInstance(ctx context.Context, in *InstanceCreateRequest, opts ...grpc.CallOption) (*CreateResult, error)
	DeleteInstance(ctx context.Context, in *InstanceDeleteRequest, opts ...grpc.CallOption) (*DeleteResult, error)
	UpdateInstance(ctx context.Context, in *InstanceUpdateRequest, opts ...grpc.CallOption) (*UpdateResult, error)
	FindInstance(ctx context.Context, in *InstanceFindRequest, opts ...grpc.CallOption) (*InstanceFindResponse, error)
	FindInstanceById(ctx context.Context, in *InstanceFindByIdRequest, opts ...grpc.CallOption) (*InstanceFindByIdResponse, error)
	FindMetaDataByIdentifier(ctx context.Context, in *MetaDataFindRequest, opts ...grpc.CallOption) (*MetaDataFindResponse, error)
}

type instanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInstanceServiceClient(cc grpc.ClientConnInterface) InstanceServiceClient {
	return &instanceServiceClient{cc}
}

func (c *instanceServiceClient) CreateInstance(ctx context.Context, in *InstanceCreateRequest, opts ...grpc.CallOption) (*CreateResult, error) {
	out := new(CreateResult)
	err := c.cc.Invoke(ctx, "/vnos.newvcms.InstanceService/CreateInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceServiceClient) DeleteInstance(ctx context.Context, in *InstanceDeleteRequest, opts ...grpc.CallOption) (*DeleteResult, error) {
	out := new(DeleteResult)
	err := c.cc.Invoke(ctx, "/vnos.newvcms.InstanceService/DeleteInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceServiceClient) UpdateInstance(ctx context.Context, in *InstanceUpdateRequest, opts ...grpc.CallOption) (*UpdateResult, error) {
	out := new(UpdateResult)
	err := c.cc.Invoke(ctx, "/vnos.newvcms.InstanceService/UpdateInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceServiceClient) FindInstance(ctx context.Context, in *InstanceFindRequest, opts ...grpc.CallOption) (*InstanceFindResponse, error) {
	out := new(InstanceFindResponse)
	err := c.cc.Invoke(ctx, "/vnos.newvcms.InstanceService/FindInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceServiceClient) FindInstanceById(ctx context.Context, in *InstanceFindByIdRequest, opts ...grpc.CallOption) (*InstanceFindByIdResponse, error) {
	out := new(InstanceFindByIdResponse)
	err := c.cc.Invoke(ctx, "/vnos.newvcms.InstanceService/FindInstanceById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceServiceClient) FindMetaDataByIdentifier(ctx context.Context, in *MetaDataFindRequest, opts ...grpc.CallOption) (*MetaDataFindResponse, error) {
	out := new(MetaDataFindResponse)
	err := c.cc.Invoke(ctx, "/vnos.newvcms.InstanceService/FindMetaDataByIdentifier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InstanceServiceServer is the server API for InstanceService service.
// All implementations must embed UnimplementedInstanceServiceServer
// for forward compatibility
type InstanceServiceServer interface {
	CreateInstance(context.Context, *InstanceCreateRequest) (*CreateResult, error)
	DeleteInstance(context.Context, *InstanceDeleteRequest) (*DeleteResult, error)
	UpdateInstance(context.Context, *InstanceUpdateRequest) (*UpdateResult, error)
	FindInstance(context.Context, *InstanceFindRequest) (*InstanceFindResponse, error)
	FindInstanceById(context.Context, *InstanceFindByIdRequest) (*InstanceFindByIdResponse, error)
	FindMetaDataByIdentifier(context.Context, *MetaDataFindRequest) (*MetaDataFindResponse, error)
	mustEmbedUnimplementedInstanceServiceServer()
}

// UnimplementedInstanceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInstanceServiceServer struct {
}

func (UnimplementedInstanceServiceServer) CreateInstance(context.Context, *InstanceCreateRequest) (*CreateResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInstance not implemented")
}
func (UnimplementedInstanceServiceServer) DeleteInstance(context.Context, *InstanceDeleteRequest) (*DeleteResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInstance not implemented")
}
func (UnimplementedInstanceServiceServer) UpdateInstance(context.Context, *InstanceUpdateRequest) (*UpdateResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInstance not implemented")
}
func (UnimplementedInstanceServiceServer) FindInstance(context.Context, *InstanceFindRequest) (*InstanceFindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindInstance not implemented")
}
func (UnimplementedInstanceServiceServer) FindInstanceById(context.Context, *InstanceFindByIdRequest) (*InstanceFindByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindInstanceById not implemented")
}
func (UnimplementedInstanceServiceServer) FindMetaDataByIdentifier(context.Context, *MetaDataFindRequest) (*MetaDataFindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMetaDataByIdentifier not implemented")
}
func (UnimplementedInstanceServiceServer) mustEmbedUnimplementedInstanceServiceServer() {}

// UnsafeInstanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InstanceServiceServer will
// result in compilation errors.
type UnsafeInstanceServiceServer interface {
	mustEmbedUnimplementedInstanceServiceServer()
}

func RegisterInstanceServiceServer(s grpc.ServiceRegistrar, srv InstanceServiceServer) {
	s.RegisterService(&InstanceService_ServiceDesc, srv)
}

func _InstanceService_CreateInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServiceServer).CreateInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vnos.newvcms.InstanceService/CreateInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServiceServer).CreateInstance(ctx, req.(*InstanceCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceService_DeleteInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServiceServer).DeleteInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vnos.newvcms.InstanceService/DeleteInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServiceServer).DeleteInstance(ctx, req.(*InstanceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceService_UpdateInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServiceServer).UpdateInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vnos.newvcms.InstanceService/UpdateInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServiceServer).UpdateInstance(ctx, req.(*InstanceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceService_FindInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceFindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServiceServer).FindInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vnos.newvcms.InstanceService/FindInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServiceServer).FindInstance(ctx, req.(*InstanceFindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceService_FindInstanceById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceFindByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServiceServer).FindInstanceById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vnos.newvcms.InstanceService/FindInstanceById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServiceServer).FindInstanceById(ctx, req.(*InstanceFindByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceService_FindMetaDataByIdentifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetaDataFindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServiceServer).FindMetaDataByIdentifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vnos.newvcms.InstanceService/FindMetaDataByIdentifier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServiceServer).FindMetaDataByIdentifier(ctx, req.(*MetaDataFindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InstanceService_ServiceDesc is the grpc.ServiceDesc for InstanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InstanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vnos.newvcms.InstanceService",
	HandlerType: (*InstanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInstance",
			Handler:    _InstanceService_CreateInstance_Handler,
		},
		{
			MethodName: "DeleteInstance",
			Handler:    _InstanceService_DeleteInstance_Handler,
		},
		{
			MethodName: "UpdateInstance",
			Handler:    _InstanceService_UpdateInstance_Handler,
		},
		{
			MethodName: "FindInstance",
			Handler:    _InstanceService_FindInstance_Handler,
		},
		{
			MethodName: "FindInstanceById",
			Handler:    _InstanceService_FindInstanceById_Handler,
		},
		{
			MethodName: "FindMetaDataByIdentifier",
			Handler:    _InstanceService_FindMetaDataByIdentifier_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/newvcms.proto",
}
