// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/vfile.proto

package vfile

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileServiceClient is the client API for FileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServiceClient interface {
	ServiceInfo(ctx context.Context, in *ServiceInfoRequest, opts ...grpc.CallOption) (*ServiceInfoResponse, error)
	Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error)
	UploadStream(ctx context.Context, opts ...grpc.CallOption) (FileService_UploadStreamClient, error)
	UploadWithOption(ctx context.Context, opts ...grpc.CallOption) (FileService_UploadWithOptionClient, error)
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*DownloadResponse, error)
	DownloadStream(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (FileService_DownloadStreamClient, error)
	DownloadWithOption(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (FileService_DownloadWithOptionClient, error)
}

type fileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServiceClient(cc grpc.ClientConnInterface) FileServiceClient {
	return &fileServiceClient{cc}
}

func (c *fileServiceClient) ServiceInfo(ctx context.Context, in *ServiceInfoRequest, opts ...grpc.CallOption) (*ServiceInfoResponse, error) {
	out := new(ServiceInfoResponse)
	err := c.cc.Invoke(ctx, "/vfile.FileService/ServiceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error) {
	out := new(UploadResponse)
	err := c.cc.Invoke(ctx, "/vfile.FileService/Upload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) UploadStream(ctx context.Context, opts ...grpc.CallOption) (FileService_UploadStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileService_ServiceDesc.Streams[0], "/vfile.FileService/UploadStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServiceUploadStreamClient{stream}
	return x, nil
}

type FileService_UploadStreamClient interface {
	Send(*UploadStreamRequest) error
	CloseAndRecv() (*UploadResponse, error)
	grpc.ClientStream
}

type fileServiceUploadStreamClient struct {
	grpc.ClientStream
}

func (x *fileServiceUploadStreamClient) Send(m *UploadStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileServiceUploadStreamClient) CloseAndRecv() (*UploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServiceClient) UploadWithOption(ctx context.Context, opts ...grpc.CallOption) (FileService_UploadWithOptionClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileService_ServiceDesc.Streams[1], "/vfile.FileService/UploadWithOption", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServiceUploadWithOptionClient{stream}
	return x, nil
}

type FileService_UploadWithOptionClient interface {
	Send(*UploadWithOptionRequest) error
	CloseAndRecv() (*UploadResponse, error)
	grpc.ClientStream
}

type fileServiceUploadWithOptionClient struct {
	grpc.ClientStream
}

func (x *fileServiceUploadWithOptionClient) Send(m *UploadWithOptionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileServiceUploadWithOptionClient) CloseAndRecv() (*UploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServiceClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*DownloadResponse, error) {
	out := new(DownloadResponse)
	err := c.cc.Invoke(ctx, "/vfile.FileService/Download", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) DownloadStream(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (FileService_DownloadStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileService_ServiceDesc.Streams[2], "/vfile.FileService/DownloadStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServiceDownloadStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileService_DownloadStreamClient interface {
	Recv() (*DownloadStreamResponse, error)
	grpc.ClientStream
}

type fileServiceDownloadStreamClient struct {
	grpc.ClientStream
}

func (x *fileServiceDownloadStreamClient) Recv() (*DownloadStreamResponse, error) {
	m := new(DownloadStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServiceClient) DownloadWithOption(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (FileService_DownloadWithOptionClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileService_ServiceDesc.Streams[3], "/vfile.FileService/DownloadWithOption", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServiceDownloadWithOptionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileService_DownloadWithOptionClient interface {
	Recv() (*DownloadStreamResponse, error)
	grpc.ClientStream
}

type fileServiceDownloadWithOptionClient struct {
	grpc.ClientStream
}

func (x *fileServiceDownloadWithOptionClient) Recv() (*DownloadStreamResponse, error) {
	m := new(DownloadStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileServiceServer is the server API for FileService service.
// All implementations must embed UnimplementedFileServiceServer
// for forward compatibility
type FileServiceServer interface {
	ServiceInfo(context.Context, *ServiceInfoRequest) (*ServiceInfoResponse, error)
	Upload(context.Context, *UploadRequest) (*UploadResponse, error)
	UploadStream(FileService_UploadStreamServer) error
	UploadWithOption(FileService_UploadWithOptionServer) error
	Download(context.Context, *DownloadRequest) (*DownloadResponse, error)
	DownloadStream(*DownloadRequest, FileService_DownloadStreamServer) error
	DownloadWithOption(*DownloadRequest, FileService_DownloadWithOptionServer) error
	mustEmbedUnimplementedFileServiceServer()
}

// UnimplementedFileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileServiceServer struct {
}

func (UnimplementedFileServiceServer) ServiceInfo(context.Context, *ServiceInfoRequest) (*ServiceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceInfo not implemented")
}
func (UnimplementedFileServiceServer) Upload(context.Context, *UploadRequest) (*UploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedFileServiceServer) UploadStream(FileService_UploadStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadStream not implemented")
}
func (UnimplementedFileServiceServer) UploadWithOption(FileService_UploadWithOptionServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadWithOption not implemented")
}
func (UnimplementedFileServiceServer) Download(context.Context, *DownloadRequest) (*DownloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedFileServiceServer) DownloadStream(*DownloadRequest, FileService_DownloadStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadStream not implemented")
}
func (UnimplementedFileServiceServer) DownloadWithOption(*DownloadRequest, FileService_DownloadWithOptionServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadWithOption not implemented")
}
func (UnimplementedFileServiceServer) mustEmbedUnimplementedFileServiceServer() {}

// UnsafeFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServiceServer will
// result in compilation errors.
type UnsafeFileServiceServer interface {
	mustEmbedUnimplementedFileServiceServer()
}

func RegisterFileServiceServer(s grpc.ServiceRegistrar, srv FileServiceServer) {
	s.RegisterService(&FileService_ServiceDesc, srv)
}

func _FileService_ServiceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).ServiceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vfile.FileService/ServiceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).ServiceInfo(ctx, req.(*ServiceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vfile.FileService/Upload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).Upload(ctx, req.(*UploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_UploadStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServiceServer).UploadStream(&fileServiceUploadStreamServer{stream})
}

type FileService_UploadStreamServer interface {
	SendAndClose(*UploadResponse) error
	Recv() (*UploadStreamRequest, error)
	grpc.ServerStream
}

type fileServiceUploadStreamServer struct {
	grpc.ServerStream
}

func (x *fileServiceUploadStreamServer) SendAndClose(m *UploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileServiceUploadStreamServer) Recv() (*UploadStreamRequest, error) {
	m := new(UploadStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileService_UploadWithOption_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServiceServer).UploadWithOption(&fileServiceUploadWithOptionServer{stream})
}

type FileService_UploadWithOptionServer interface {
	SendAndClose(*UploadResponse) error
	Recv() (*UploadWithOptionRequest, error)
	grpc.ServerStream
}

type fileServiceUploadWithOptionServer struct {
	grpc.ServerStream
}

func (x *fileServiceUploadWithOptionServer) SendAndClose(m *UploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileServiceUploadWithOptionServer) Recv() (*UploadWithOptionRequest, error) {
	m := new(UploadWithOptionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileService_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vfile.FileService/Download",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).Download(ctx, req.(*DownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_DownloadStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileServiceServer).DownloadStream(m, &fileServiceDownloadStreamServer{stream})
}

type FileService_DownloadStreamServer interface {
	Send(*DownloadStreamResponse) error
	grpc.ServerStream
}

type fileServiceDownloadStreamServer struct {
	grpc.ServerStream
}

func (x *fileServiceDownloadStreamServer) Send(m *DownloadStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FileService_DownloadWithOption_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileServiceServer).DownloadWithOption(m, &fileServiceDownloadWithOptionServer{stream})
}

type FileService_DownloadWithOptionServer interface {
	Send(*DownloadStreamResponse) error
	grpc.ServerStream
}

type fileServiceDownloadWithOptionServer struct {
	grpc.ServerStream
}

func (x *fileServiceDownloadWithOptionServer) Send(m *DownloadStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// FileService_ServiceDesc is the grpc.ServiceDesc for FileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vfile.FileService",
	HandlerType: (*FileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServiceInfo",
			Handler:    _FileService_ServiceInfo_Handler,
		},
		{
			MethodName: "Upload",
			Handler:    _FileService_Upload_Handler,
		},
		{
			MethodName: "Download",
			Handler:    _FileService_Download_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadStream",
			Handler:       _FileService_UploadStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "UploadWithOption",
			Handler:       _FileService_UploadWithOption_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadStream",
			Handler:       _FileService_DownloadStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DownloadWithOption",
			Handler:       _FileService_DownloadWithOption_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/vfile.proto",
}
